nrow(mm[2])
A <- matrix( nrow = largo, ncol = p + 1)
NEEstimator(mm,1,2,2)
NEEstimator(mm,1,2,1)
A
A[,1] <- 1
A
for(i in c(1: p)){
A[,i+1] <- mm[[2]]**i
}
A
solve(t(A) %*% A)
for(i in c(1: p)){
A[,i+1] <- mm[[3]]**i
}
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[y]])
A
solve(t(A) %*% A)
t(A) %*% data[[y]]
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[1]])
salida <- solve(t(A) %*% A) %*% (t(A) %*% mm[[1]])
solve(t(A) %*% A) %*% (t(A) %*% mm[[1]])
p <- c(9.3, 4.8, 8.9, 6.5, 4.2, 6.2, 7.4, 6, 7.6, 6.1)
#x0 <- c(1,1,1,1,1,1,1,1,1,1)
x1 <-  c(100,50,100,100,50,80,75,65,90,90)
x2 <- c(4,3,4,2,2,2,3,4,3,2)
#> Y <- as.matrix(y)
mm <- data.frame(p,x1,x2)
mm
largo <- nrow(mm[2])
nrow(mm[2])
A <- matrix( nrow = largo, ncol = p + 1)
A
largo <- nrow(mm[2])
p <- 2
A <- matrix( nrow = largo, ncol = p + 1)
A
for(i in c(1: p)){
A[,i+1] <- mm[[2]]**i
}
A
A[,1] <- 1
A
solve(t(A) %*% A) %*% (t(A) %*% mm[[1]])
A[,2:3]
mm[[2:3]]
mm[[2]]
mm[[2,3]]
mm[2:3]
A[,2:3] <- mm[2:3]
A
A <- matrix( nrow = largo, ncol = p + 1)
A[,2] <- mm[[2]]
A[,3] <- mm[[3]]
A
A[,1] <- 1
solve(t(A) %*% A) %*% (t(A) %*% mm[[1]])
NEEstimator(mm,1,2,1)
NEEstimator(mm,1,2,2)
NEEstimator(mm,1,2,3)
NEEstimator(mm,1,2,2)
NEEstimator(df,4,1,2)
df
df <- read.csv("advertising.csv")
df <- df[,c(2:5)]
NEEstimator(df,4,1,2)
NEEstimator(df,4,1,2)
df
lm_2 <- lm(sales ~ poly(tv, 2), data=df )
lm_2 <- lm(Sales ~ poly(TV, 2), data=df )
summary(lm_2)
lm_2
NEEstimator(df,4,1,1)
NEEstimator(df,4,2,1)
NEEstimator(df,4,3,1)
largo <- nrow(df[1])
A <- matrix( nrow = largo, ncol = 1 + 1)
A[,1] <- 1
A
for(i in c(1: 1)){
A[,i+1] <- data[[1]]**i
}
A
A[,1+1] <- data[[1]]
A[,2] <- data[[1]]
A <- matrix( nrow = largo, ncol = 1 + 1)
A
A[,1] <- 1
A[,2] <- data[[1]]
A[,2] <- df[[1]]
A
salida <- solve(t(A) %*% A) %*% (t(A) %*% df[[4]])
salida
lm_1 <- lm(Sales ~ TV, data=df )
lm_1
NEEstimator(df,4,1,1)
df
df[4]
df[1]
NEEstimator(df,4,1,1)
data <- df
Y <- 4
X <- 1
p <- 1
largo <- nrow(data[X])
A <- matrix( nrow = largo, ncol = p + 1)
A[,1] <- 1
A
A
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[y]])
salida
NEEstimator(df,4,1,1)
lm_1 <- lm(Sales ~ TV, data=df )
lm_1
A
t(A) %*% A
t(A) %*% df[[4]]
t(A) %*% A
t(A) %*% A   %*%  t(A) %*% df[[4]]
solve(t(A) %*% A)   %*%  t(A) %*% df[[4]]
solve(t(A) %*% A) %*% (t(A) %*% data[[y]])
solve(t(A) %*% A)   %*%  t(A) %*% df[[4]]
solve(t(A) %*% A)   %*%  t(A) %*% data[[4]]
y
NEEstimator <- function(data,Y,X,p){
#x <- c(1,2,3,4,5,6)
#y <- c(3,3.5,4,4.5,7,7.1)
largo <- nrow(data[X])
A <- matrix( nrow = largo, ncol = p + 1)
A[,1] <- 1
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[Y]])
return (salida)
}
NEEstimator(df,4,1,1)
NEEstimator(mtcars_data,2,1,3)
NEEstimator(mtcars_data,2,1,2)
NEEstimator(mtcars_data,2,1,)
NEEstimator(mtcars_data,2,1,1)
lm_2 <- lm(mpg ~ poly(disp, 2), data=mtcars_data )
lm_2
mtcars_data
NEEstimator(mtcars_data,2,1,2)
lm_2 <- lm(mpg ~ poly(disp, 2), data=mtcars_data )
lm_2
summary(lm_2)
lm_2
NEEstimator(mtcars_data,2,1,2)
mtcars_data
rm(list= ls())
df <- read.csv("advertising.csv")
df <- df[,c(2:5)]
df
NEEstimator(df,4,1,1)
NEEstimator <- function(data,Y,X,p){
#x <- c(1,2,3,4,5,6)
#y <- c(3,3.5,4,4.5,7,7.1)
largo <- nrow(data[X])
A <- matrix( nrow = largo, ncol = p + 1)
A[,1] <- 1
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[Y]])
return (salida)
}
NEEstimator(df,4,1,1)
lm_2 <- lm(Sales ~ poly(TV, 2), data=df )
lm_2
NEEstimator(df,4,1,2)
NEEstimator <- function(data,Y,X,p){
largo <- nrow(data[X])
A <- matrix( nrow = largo, ncol = p + 1)
A[,1] <- 1
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[Y]])
return (salida)
}
NEEstimator(df,4,2,2)
lm_2 <- lm(Sales ~ poly(Radio, 2), data=df )
lm_2
lm_1 <- lm(Sales ~ Radio, data=df )
lm_1
NEEstimator(df,4,2,1)
NEEstimator(df,4,2,3)
NEEstimator(df,4,2,4)
lm_2 <- lm(Sales ~ poly(Radio, 4), data=df )
lm_2
df = mtcars
df = mtcars
df
lm_1 <- lm(mpg ~ disp, data=mtcars )
lm_1
NEEstimator(df,1,3,1)
rm(list= ls())
NEEstimator <- function(data,Y,X,p){
# cantidad de elementos
largo <- nrow(data[X])
# se crea una matriz con el largo de elementos y columnas de la cantidad de polinonio + 1
A <- matrix( nrow = largo, ncol = p + 1)
# asigmacion de unos en la primer columna
A[,1] <- 1
# se recorre cada columna y se asiga su valor elevado a segun a la potencia definida
# i = 1 --> data**1
# i = 2 --> data**2
# i = 3 --> data**3
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
# se calcula el valor
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[Y]])
return (salida)
}
df = mtcars
lm_1 <- lm(mpg ~ disp, data=mtcars )
lm_1
NEEstimator(df,1,3,1)
NEEstimator(df,1,3,2)
NEEstimator(df,1,3,3)
df
NEEstimator(df,1,5,3)
NEEstimator(df,1,5,4)
NEEstimator(df,1,5,5)
NEEstimator(df,1,5,6)
NEEstimator(df,1,5,5)
NEEstimator(df,1,5,3)
NEEstimator(df,1,5,2)
NEEstimator(df,1,3,3)
df <- read.csv("advertising.csv")
df <- df[,c(2:5)]
df
NEEstimator(df,4,2,4)
rm(list= ls())
df <- read.csv("advertising.csv")
df <- df[,c(2:5)]
df
NEEstimator <- function(data,Y,X,p){
# cantidad de elementos
largo <- nrow(data[X])
# se crea una matriz con el largo de elementos y columnas de la cantidad de polinonio + 1
A <- matrix( nrow = largo, ncol = p + 1)
# asigmacion de unos en la primer columna
A[,1] <- 1
# se recorre cada columna y se asiga su valor elevado a segun a la potencia definida
# i = 1 --> data**1
# i = 2 --> data**2
# i = 3 --> data**3
for(i in c(1: p)){
A[,i+1] <- data[[X]]**i
}
# se calcula el valor
salida <- solve(t(A) %*% A) %*% (t(A) %*% data[[Y]])
return (salida)
}
lm_1 <- lm(SaLes ~ TV, data=df )
lm_1 <- lm(Sales ~ TV, data=df )
lm_1
NEEstimator(df,4,1,1)
NEEstimator(df,4,1,2)
NEEstimator(df,4,1,3)
NEEstimator(df,4,1,4)
NEEstimator(df,4,2,4)
NEEstimator(df,4,1,3)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
Boston
dataset <- Boston
glimpse(dataset)
glimpse(dataset)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
chart.Correlation(dataset[,c(-4,-14)], hist=T, cex=2)
chart.Correlation(dataset[,c(-4,-14)], hist=T, cex=2)
library(PerformanceAnalytics)
chart.Correlation(dataset[,c(-4,-14)], hist=T, cex=2)
chart.Correlation(dataset[,c(-4,-14)], hist=T, cex=2)
set.seed(1234)
index <- sample(1: nrow(1:nrow(dataset),0.7*nrow(dataset), replace=F)
dataTest <- dataset[-index,]
dataTest <- dataset[-index,]
dataTrain <- dataset[index,]
index <- sample(1: nrow(1:nrow(dataset),0.7*nrow(dataset), replace=F)
dataTrain <- dataset[index,]
glimpse(dataset)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
library(PerformanceAnalytics)
Boston
library(ggplot2)
library(dplyr)
library(caret)
Boston
dataset <- Boston
glimpse(dataset)
library(MASS)
library(ggplot2)
library(dplyr)
library(dplyr)
install.packages("rlang")
install.packages("rlang")
library(dplyr)
install.packages("rlang")
install.packages("rlang")
library(dplyr)
library(MASS)
library(ggplot2)
library(dplyr)
install.packages("rlang")
install.packages(c("dplyr", "rlang"))
library(dplyr)
install.packages("vctrs")
library(dplyr)
library(caret)
library(PerformanceAnalytics)
Boston
Boston
eq = function(x){x*x}
plot(eq(1:1000), type='l')
eq = function(x){x^4-6x^3+3x^2+10}
eq = function(x){x**4-6x**3+3x**2+10}
eq = function(x){x**4}
plot(eq(1:1000), type='l')
eq = function(x){x**4 - 6 * x**3 + 3 * x**2 + 10}
plot(eq(1:1000), type='l')
plot(eq(-1000:1000), type='l')
plot(eq(-0.3:6.1), type='l')
plot(eq(-10:10), type='l')
plot(eq(-10:1), type='l')
plot(eq(-6:1), type='0.1')
plot(eq(-6:1), type='0.1')
plot(eq(-6:0.1), type='0.1')
-0.3
plot(eq(-0.3:6.1), type='l')
plot(eq(-6.1:0.3), type='l')
data.edad <- c(16,25,39,45,49,64,70)
data.peso <- c(140,149,165,170,165,159,144)
data.pres <- c(125,129,127,150,161,144,132)
data
edad <- c(16,25,39,45,49,64,70)
peso <- c(140,149,165,170,165,159,144)
pres <- c(125,129,127,150,161,144,132)
data <- data.frame("edad" = edad,"peso" = peso, "pres" = pres)
data
modelo <- lm(pres~.,data=data)
modelo
plot(modelo)
plot(data)
data
rss <- function(data, par) {
with(data, sum((par[1] + par[2] * x - y)^2))
}
(result <- optim(par = c(0, 1 ,2), fn = rss, data = data))
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
result <- optim(par = c(0, 1 ,2), fn = fr, data = data)
(result <- optim(par = c(0, 1 ,2), fn = fr, data = data))
(result <- optim(par = c(0, 1), fn = fr, data = data))
optim(c(-1.2,1), fr)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
#x3 <- x[3]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
optim(c(-1.2,1), fr)
fr
rss <- function(data, par) {
with(data, sum((par[1] + par[2] * edad - pres)^2))
}
(result <- optim(par = c(0, 1), fn = rss, data = data))
rss <- function(data, par) {
with(data, sum((par[1] + par[2] * edad + par[3] * peso - pres)^2))
}
(result <- optim(par = c(0, 1), fn = rss, data = data))
(result <- optim(par = c(0, 1), fn = rss, data = data))
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
with(data, sum(( par[1] * edad + par[2] * peso - pres)^2))
rss <- function(data, par) {
with(data, sum(( par[1] * edad + par[2] * peso - pres)^2))
}
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
rss <- function(data, par) {
with(data, sum((par[3] + par[1] * edad + par[2] * peso - pres)^2))
}
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
edad <- c(16,25,39,45,49,64,70)
peso <- c(140,149,165,170,165,159,144)
pres <- c(125,129,127,150,161,144,132)
data <- data.frame("edad" = edad,"peso" = peso, "pres" = pres)
data
rss <- function(data, par) {
with(data, sum((par[3] + par[1] * edad + par[2] * peso - pres)^2))
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
}
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
data
rss <- function(data, par) {
with(data, sum((par[3] + par[1] * edad + par[2] * peso - pres)^2))
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
}
rss <- function(data, par) {
with(data, sum((par[3] + par[1] * edad + par[2] * peso - pres)^2))
}
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
modelo <- lm(pres~.,data=data)
modelo
edad <- c(16,25,39,45,49,64,70)
peso <- c(140,149,165,170,165,159,144)
pres <- c(125,129,127,150,161,144,132)
data <- data.frame("edad" = edad,"peso" = peso, "pres" = pres)
data
rss <- function(data, par) {
with(data, sum((par[3] + par[1] * edad + par[2] * peso - pres)^2))
}
(result <- optim(par = c(0, 1, 2), fn = rss, data = data))
modelo <- lm(pres~.,data=data)
modelo
install.packages("shiny")
install.packages("shinydashboard")
install.packages("reticulate")
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
-4 + 16 x^3
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
runApp()
runApp()
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
gd13Calculate()
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
library("reticulate")
use_python('C:/Users/hecto/AppData/Local/Programs/Anaconda3')
shiny::runApp('A_MASTER_DS/AlgoritmosEnLaCienciaDeDatos/demo1')
setwd("~/")
setwd("~/A_MASTER_DS/ProductDevelopment")
shiny::runApp('~/test1')
runApp('~/test1')
runApp('~/test1')
setwd("~/A_MASTER_DS/ProductDevelopment/github")
runApp('Lab1')
runApp('Lab1')
runApp('Lab1')
mtcars
runApp('Lab1')
runApp('Lab1')
runApp('Lab1')
runApp('Lab1')
rownames(mtcars)
runApp('Lab1')
runApp('Lab1')
